{
id: "standard_values",

# rationale for this file:
#  Multiple basic prototypes use these values, and previously redundantly had them as literal constants.
#  Objects based on prototypes can't refer to the properties in said prototype if they redeclare them - they frequently do to put that value in a conditional, and they have to redeclare it as yet another redundant copy of this constant.

#  certain functions are truly global, but need the convenience of being properties for easy access to the referring object's scope
properties: {

#-------------------------- global values --------------------------#
	standard_thrown_damage: 400,
	kill_anything:  20000,		#a large int meant to be fatal to anything
	
	lower_difficulty: "level.player.difficulty < level.player.difficulty_challenging",
	higher_difficulty: "level.player.difficulty > level.player.difficulty_casual",

	max_recursion_depth: 1000,  #incorrect behavior is better than stack overflows, which we'd occasionally get if FFL is allowed to recurse indefinitely.  This has to manually be checked against a counter value.


#-------------------------- general functions --------------------------#
	#late-bound execution of commands across level-boundaries
	eval_and_exec: "def(f) [set(event_handlers.__do_stuff_eval_and_exec, f), fire_event('__do_stuff_eval_and_exec')]",



#-------------------------- sound functions --------------------------#
sound_falloff: "def(string sound_name, int falloff_dist=200, int|decimal max_volume=1.0) ((sound(sound_name, volume, fade_in_time, stereo_pan)
						where fade_in_time = 0.0,
						where stereo_pan = [constrain(volume, falloff_dist/dist_to_player(-ear_radius), 1.0),constrain(0, falloff_dist/dist_to_player(ear_radius), 1.0)]
					) where volume = constrain(0, decimal(falloff_dist)/dist_to_player(0), max_volume)
				) where dist_to_player = def(x_offset) length(self.mid_x, self.mid_y, level.player.mid_x + x_offset, level.player.mid_y), where ear_radius = 250",	
	
	
	
	standard_victory_music: "execute(level.player, [
									sinusoidal_music_volume_transition(50, 90, 90, 0, 1),
									schedule((7*50), sinusoidal_music_volume_transition(500, 0, 90, 0, 1), ),
									schedule(7*50,music('FrogattoDreamAdventure.ogg')),
									sound('musical/FrogattoFanfare.ogg')])",


#-------------------------- cosmetic functions --------------------------#
	sinusoidal_transition: "def(period, _init_theta, _length_theta, addend, coefficient, obj,  quality) map(range(period), schedule(index, set(obj[quality], addend + coefficient*sin(init_theta + (decimal(length_theta)*index)/period )  )))
		where init_theta = _init_theta*90.0, length_theta = _length_theta*90.0
	", #pass quality as a string.  TODO: compress range bounds for given quality (not everything is 0.0~1.0 like scale)

	
	sinusoidal_scale_transition: "def(period, init_theta, length_theta, addend, coefficient) map(range(period), schedule(index, set(me.scale, addend + coefficient*sin(init_theta + (decimal(length_theta)*index)/period )  )))",  # we may in fact want to retain these for speed, though

	sinusoidal_music_volume_transition: "def(period, init_theta, length_theta, addend, coefficient) map(range(period), schedule(index, set(level.music_volume, addend + coefficient*sin(init_theta + (decimal(length_theta)*index)/period )  )))",


	_find_floor_standable: "def(int u, int v, object obj) -> [int]|null
	    find_point_object_can_stand_on(level, obj, u, v, 0, 1)",

	//TODO:  make this detect objects too
	floor_level_beneath_character: "def(int u, int v, object obj) -> [int]|null _find_floor_standable(u,v,obj)",
},
}
