{
id: "hittable",
prototype: ["standard_values"],
collide_dimensions: ["player","~enemy","~hazard"],

mass: 5,
properties: {
	flinch_threshold: 3,
	hurt_velocity_y: -400,
	hurt_velocity_x: -200,
	attack_knockback: 0,
	attack_damage: 0,
	armor: 0,
	damage_cooldown: 0,
	get_hit_by: "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and ( collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
							[display_hurt_visuals(collide_with),
							
							if((not is_invincible) and collide_with.attack_damage > armor,
									[display_posthit_invincibility_flash_sequence(),
									handle_flinch(collide_with),
									handle_damage(collide_with),
									set(vars.time_last_hit, me.cycle),
									])]),
						
						handle_knockback(collide_with)])",
						
	get_hit_sourceless: "def(damage_amount) execute(me,  /*take damage and invoke the usual behavior, but without any influence (e.g. amount, etc) from a source.
														   This almost universally should be used for e.g. being stomped on, or other self-determined damage amounts (falling?).
														   We've chosen to do this separately because so much of get_hit_by's internals have collide_with baked in as an assumed reference,
														   and we're looking to just -omit-, rather than override, most of them.*/
						if((not is_invincible) and (damage_amount >= armor),
								[display_hurt_visuals(null),
								display_posthit_invincibility_flash_sequence(),
								handle_damage_sourceless(damage_amount),
								set(vars.time_last_hit, me.cycle),
								]))",

#-------------------------- identifiers --------------------------#
	
	

#-------------------------- generic helper functions --------------------------#
	facing_towards_player: "facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
	attempt_animation: "def(anim_name, fallback_anim) execute(me, if(anim_name in available_animations, set(animation, anim_name), set(animation, fallback_anim)))",


#-------------------------- behavior handlers --------------------------#
# anims/movement
	handle_special_damage_response: "def(collide_with) null #virtual#", //meant for unique actions upon taking damage, like losing wings.  Also for special type-based behavior that happens regardless of damage amount (such as maybe a feathered creature having its feathers burned off and effectively turning into a different, flightless enemy type).
	handle_flinch: "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
	cause_flinch: "def(object|null collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(me.midpoint_x - if(collide_with, collide_with.midpoint_x, 0))), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
	cause_hurt_anim: "def(object|null collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",

# damage
	handle_damage_type_modifications: "def(amount) amount #virtual#",  //meant for applying any kind of arithmetic to the raw damage amount, based on type.
	handle_base_damage_reductions: "def(amount) amount #virtual#",  //meant for flat, type-agnostic reductions to ALL damage.
	final_damage_amount: "def(damage_amount) if((damage_amount < armor) or me.is_invincible, 0, handle_damage_type_modifications( handle_base_damage_reductions( damage_amount )))",
	will_be_dead: "def(damage_amount) ((me.hitpoints - damage_amount) <= 0)",
	
	handle_damage_sourceless: "def(dmg) execute(me,[if(will_be_dead(dmg), handle_death(null)), add(me.hitpoints, - final_damage_amount(dmg))])",
	handle_damage: "def(collide_with) execute(me,[if(will_be_dead(dmg), handle_death(collide_with)), add(me.hitpoints, - final_damage_amount(dmg))]) where dmg = collide_with.attack_damage",
	handle_knockback: "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",

# death
	should_track_death: null,
	handle_death: "def(collide_with) [
						add(level.player.score, points_value),
						if(not acquirable_item_drop_value = null,drop_acquirable_items()),
						if(should_track_death, register_kill(me)),
						if(me.corpse_object_type, spawn_corpse),
						
						death_effects(if(collide_with and collide_with.damage_type, collide_with.damage_type,death_fx_type))]",
						
	spawn_corpse: "spawn(me.corpse_object_type, mid_x, mid_y, facing)",
	corpse_object_type: null,
	death_fx_type: null,

# invincibility
	is_invincible_posthit: "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < posthit_invicibility_period), 1, 0)",
	is_invincible: "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",




#-------------------------- item drop logic --------------------------#
	drop_item_list: "sans_undroppables(_drop_item_list)",
	drop_item_weights: "sans_undroppables(_drop_item_weights)",
	_drop_item_list: "{'heart_object' : 10, 'points_cube' : 7}",
	_drop_item_weights: "{'heart_object' : 30, 'points_cube' : 70}",
	drop_item_validity: "{'heart_object' : (not level.player.hitpoints = level.player.max_hitpoints),  'points_cube' : true }",
	acquirable_item_drop_value: null,  //how many of the dropped items the dying monster/thing is worth.
	sans_undroppables: "def(source) filter(source, drop_item_validity[key])",
	
	
	choose_drop_item_nonweighted: "choose(keys(drop_item_list))",  //unused but useful reference
	choose_drop_item_weighted: " search_drop_list(drop_item_weights, 0, 0, 1d(sum(values(drop_item_weights)))) ",
	search_drop_list: "def(thelist, i, tally, target_val) if(tally >= target_val, keys(thelist)[i-1], search_drop_list( thelist, i+1, tally + values(thelist)[i], target_val))",

	calculate_drop_items: "def(value_left, toBeDropped) 
			if( anything_can_still_be_dropped, calculate_drop_items(value_left - drop_item_list[picked], toBeDropped + [picked]), toBeDropped)
				where picked = choose_drop_item_weighted
				where anything_can_still_be_dropped = (find(values(drop_item_list), value <= value_left) != null)",
	drop_acquirable_items: "def() if((not higher_difficulty) or 1d4=4,
									map(calculate_drop_items(me.acquirable_item_drop_value,[]), spawn(value, me.mid_x, me.y, me.facing,[set(child.velocity_x, velocity_x/6 +1d600-300), set(child.velocity_y, velocity_y/6)])))",

	
#-------------------------- cosmetic functions --------------------------#
	display_hurt_visuals: "def(collide_with) execute(me, 
					if(not collide_with = null,
						[if(dmg > 0, [hurt_flash_sequence(),play_hurt_sounds(collide_with.damage_type)], invincible_flash_sequence())] where dmg = final_damage_amount(collide_with.attack_damage),
						
						[hurt_flash_sequence(),
						play_hurt_sounds(null)
						])
					)",

	invincible_flash_sequence: "def()	[	flash_bright(),
											schedule(5, flash_off()),
											schedule(6, flash_bright()),
											schedule(8, flash_off())]",

	hurt_flash_sequence: "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
									
	play_hurt_sounds: "def(type) switch(type,
									'null', null
								)",
	display_posthit_invincibility_flash_sequence: "def() if(posthit_invicibility_period, 
			map(range(me.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(me.alpha,50),set(me.alpha,255))  ) ) )",
	flash_bright: "def() [set(me.brightness, 1023)]",
	flash_red: "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
	flash_off: "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
	
	
	death_effects: "def(type)
			if(me.underwater, splash_effect(),

			(switch(type,
					/*these are a set of effects based on the type of creature dying*/
					'bug', [vfx('die_cloud_puffy'), sound('death-crunch'+1d2+'.wav')],
					'mushroom', [vfx('die_cloud_evaporative'), sound('death-crunch'+1d2+'.wav')],
					'plant', [vfx('die_cloud_evaporative'), sound('Death-Plant-Short'+1d5+'.wav')],
					'animal', [vfx('die_cloud'), sound('death-crunch'+1d2+'.wav'), spawn_gibs('bone_straight',1d2), spawn_gibs('bone_skull',1)],
					'milgramen', [vfx('die_cloud'), sound('Milgramen-Explode'+1d5+'.wav')],

					/*a set of effects based on the damage source; elsewhere in hittable these actually overrule the creature-type*/
					'fire', [vfx('die_cloud_fire'), sound('death-acid'+1d5+'.wav')],
					
					/*generic recurring effects for miscellaneous things - often not actually enemies*/
					'small', repeat_fx('die_cloud_small',5,4,10,10, null),
					'medium', repeat_fx('die_cloud_medium',5,4,20,30, null),
					'large', repeat_fx('die_cloud',5,10,50,70, sound('splat.ogg')),
			)
			where repeat_fx = def(obj_type,count,delay,spread_x,spread_y,do_sound) spawn('particle_system_holder', me.mid_x, me.mid_y, if(1d2=2,-1,1), 
				execute(child, map(range(count),schedule(value*delay, [child.set_time_to_live(count*(delay+1)), vfx_spread(obj_type,spread_x,spread_y), do_sound ]))))
			
			
			) where vfx = def(obj_type) spawn(obj_type, me.mid_x, me.mid_y, if(1d2=2,-1,1)))
			where vfx_spread = def(obj_type,spread_x,spread_y) spawn(obj_type, me.mid_x + 1d(spread_x) - 1d(spread_x), me.mid_y  + 1d(spread_y) - 1d(spread_y), if(1d2=2,-1,1))
			",
	
	spawn_gibs: "def(variation_type, count) map([0]*count, spawn('bouncing_debris_chunk',x+1d10, y+1d10, if(1d2=2,1,-1), [add(child.variations, [variation_type]),child.init_vel('burst')]))",

	splash_effect: "def() if(me.underwater and me.water_bounds,
					[if(abs(me.water_bounds[1] - me.midpoint_y) > 40,
						spawn('water_splash_underwater_big', me.mid_x, me.mid_y, if(1d2=2,me.facing,-me.facing)),
						spawn('water_splash', me.midpoint_x, me.water_bounds[1]+10, if(1d2=2,me.facing,-me.facing))),
					sound('water-enter.ogg'), ])",
					
	tile_tags: "def() //Twist around the data structure, so that each tile mnemonic is the key to a list of keys to the lists it's in.
		fold(
			map(flatten(values(tags)), 'tla',
				{(tla): find(keys(tags), 'key', tla in tags[key])} ),
			a+b)
		where tags = {
			'wood': 		['fbr','acn','act','ast','isb','fnt','int',],
			'foliage':		['ngs',],
			'dirt':			['nrk','frg',],
			'stone':		['crk','dbk','cbk',],
			'wood_solid':	['ins','tnk',],
			'metal':		['ppl','slf',],
		}",
	object_tags: "def() filter([standing_on and standing_on['material sound']], value)",
	tags_on: "def() object_tags() or unique(filter(map(tiles_at(midpoint_x, y+img_h+1), tile_tags()[value.id]), value))",
	tagged_sfx: "def(action) []", //See frogatto_playable.cfg for an example.
	choose_sfx: "def(action)
		if(snd, snd.sound) where snd = find(sfx, 'effect', find(tags + ['default'], 'tag', tag in effect.keys)) where sfx = tagged_sfx(action), tags = tags_on()",
},

#-------------------------- collision event handling --------------------------#
	on_outside_level: "[if(y > level.dimensions[3], add(hitpoints,-1))]",

	//this is meant to ensure we don't take multple instances of damage from a damage type that's a "stream" in a single frame.  If we get hit, we check for other collisions with the same kind of shot, and only take damage from the first one.
	//we double-check it's the same collide-with area, because we DO want multiple collisions from an object for each different area; we use this on e.g. the milgram-pod to allow it to be shot out of the air by the player (needs a body area and a thrown area during the thrown anim, rather than the usual "only the thrown area" for player-spat objects).  This mechanism may be the ideal place to check for 'armored regions' on an otherwise vulnerable creature; check if we're getting a collision on both the body and the armor.
	//TODO:  this may be unwanted on shots without a cooldown, where a "shotgun" effect of multiple hits is desired.
on_collide_object_body: "(if(not  find(   filter(all_collisions, value.collide_with.type = collide_with.type and value.collide_with_area = collide_with_area), value.collision_index < collision_index), process_collision()))

		//two special exceptions here besides the 'no friendly-fire' rule;
		// evil_harmless is a special team for thrown enemies wherein they can't hurt anyone, regardless of the target's team, but also - stuff from team 'evil' won't friendly-fire them.  They can and will be hurt by any player actions, though, and any traps/neutral damage sources.
	where process_collision = def() if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",

#-------------------------- error condition handling --------------------------#
on_change_solid_dimensions_fail: "fire_event('solidity_fail')",
on_change_animation_failure: "fire_event('solidity_fail')",

# if the level starts, and we're embedded in solid stuff, try moving upwards to get out of it.
# this should catch any errors introduced by changes to solid area or handling thereof
on_solidity_fail: "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
on_add_object_fail: "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
}
