{
id: "shot",
prototype: ["standard_values"],

collide_dimensions: ["player","enemy","~hazard"],
solid_dimensions: ["enemy","player","common"],

#make it so when the object runs into solid parts of the level, an on_collide_level event is fired so the shot can be destroyed.
object_level_collisions: true,
has_feet: false,

#
# expected things a user of this prototype must implement to deal damage
#	properties.attack_damage - how much damage is dealt
#	properties.attack_knockback - a power-level for how hard it hits.
#	properties.damage_cooldown - how long the enemy will be invincible, used to cap the DPS of flamethrower-esque weapons, whilst allowing nigh-unlimited numbers of shots to make the attack easy to hit with.
#		Note that if cooldown is zero, the enemy should always take damage.
#	animation attack_area - an area that will trigger a hit
#	animation body_area - only set this if you want this shot to be neutralizable by enemy shots
properties: {
	team: "'evil'",
	attack_knockback: 0,
	attack_damage: "if(higher_difficulty, 2, 1)",
	damage_cooldown: 0,
	dies_when_hit: 1,
	is_a_shot: 	true,
	goes_through_enemy_shots: 0,

	#the shot, itself, can take damage;  this lets the player deflect it with an attack (or vice-versa)
	#this ONLY works if you give the shot a "body_area"
	get_hit_by: "def(collide_with) if( (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
										[add(me.hitpoints, - collide_with.attack_damage), set(vars.time_last_hit,me.cycle)])",

	test_hits: "def(collide_with, string area_name) if(collide_with.team != team and collide_with_area = area_name,
			if((me.goes_through_enemy_shots) and (collide_with.is_a_shot), null,
		 	 	if(me.dies_when_hit, [get_hit_by(collide_with),die()],
		  			 get_hit_by(collide_with))))",
},
on_collide_side: "die()",
on_collide_level: "die()",
on_collide_object_body: "test_hits(collide_with,'attack')",
		  
on_collide_object_attack: "test_hits(collide_with,'body')",
}
