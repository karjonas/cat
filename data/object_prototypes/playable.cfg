{
id: "playable",
solid_dimensions: ["player","common","boss"],
vehicle: false,
is_human: true,
prototype: ["hittable"],
collide_dimensions: ["player","enemy","hazard","item"],

properties: {
	hurt_velocity_y: -800,
	hurt_velocity_x: 0,

	scripted_move_to_x: "def(int target_x, int target_facing, commands|null callback) -> commands [
		set(me.tmp.scripted_target_x, target_x),
		set(me.tmp.scripted_target_facing, target_facing),
		set(me.tmp.scripted_move_callback, callback),
		fire_event(me, 'handle_move_script'),
	]",
		
	handle_damage: "def(object collide_with) -> commands execute(me,[
		add(me.hitpoints, - if(me = level.player and collide_with.attack_damage_to_player, collide_with.attack_damage_to_player, collide_with.attack_damage)),
		player_damage_screen_flash(collide_with.attack_damage),
		set(solid_dimensions_in, ['player']),
		player_specific_damage_response()
	])",
	
	player_damage_screen_flash: "def(int damage_amounts) -> commands
		if(damage_amounts > 2 or damage_amounts >= hitpoints, 
			screen_flash([255, 0, 0,255], 4), 
			if(damage_amounts = 2, 
				screen_flash([255, 0, 0,200], 3), 
				screen_flash([255, 0, 0,70], 2)))",
	
	player_specific_damage_response: "def() -> commands null",
	
	help: "string <- q{\nDebug Console Help:\nThis is the debug console. Commands, which are written in FFL, are run on the\nselected object. For example, you just ran the help command on our hero. Some\nother commands you could try might be 'set(velocity_y, -5000)', or 'add(hp,5)'.To change the target of your actions in the console, click on the desired\nobject. There is a lot more you can do with FFL, so have a look at the\ndocumentation on our wiki, https://github.com/frogatto/frogatto/wiki/. If you\nget stuck, www.frogatto.com has a friendly forum where you can seek advice.\nPress ctrl-d to close the console.\n}",
	
	team: "'player'",
	
	store_event_add: "def(string event_name, any addend) -> commands
		set(level.player.stored_events, map_merge(level.player.vars.stored_events, {(event_name) -> addend}))
		asserting event_name != '' | pp_string({message:'Attempting to add a stored event, but the event name given is an empty string.', name:event_name, addend:addend})",
	
	store_event: "def(event_name, value) -> commands
		add(level.player.vars.stored_events, {(event_name) -> value})
		asserting event_name != '' | pp_string({message:'Attempting to store an event, but the event name given is an empty string.', name:event_name, value:value})",
	
	mana: {
		get: "decimal <- vars.mana",
		set: "[commands] <- ([set(vars.mana, if(not should_manashock, newValue, 0)), if(should_manashock, set(vars.mana_shock_cycle, cycle))] 
			where should_manashock = (sign(newValue - vars.mana) = -1 and newValue < mana_regen_per_frame*2)
				) where newValue = median(value, 0, vars.max_mana)"
	},
	
	mana_shock_active: "bool <- cycle - vars.mana_shock_cycle < mana_shock_duration",
	mana_shock_duration: 150,
	mana_shock_guard: "def(/*commands*/any thingToDo) -> commands if(not mana_shock_active, thingToDo)",

	log_string: "def(string event) -> commands [
		set(tmp.logged_events, new_events),
		debug(new_events),
	] where new_events = map_merge(tmp.logged_events or {}, {(event):1})
	asserting event != '' | 'Error: log_string was passed an empty string.'",
	
	posthit_invicibility_period: 100,
	
	is_demo_version: "false",
	
	float: "def() -> commands [
		animation('swim_side_idle'), 
		set(has_feet, false),
		if(IPHONE_SYSTEM, set(underwater_controls, underwater)),
		]",
},

vars: {
	achievement_kill_chain: [[null,-1000],[null,-2000],[null,-3000],[null,-4000],[null,-4000],[null,-5000],[null,-6000],[null,-7000],[null,-8000],[null,-9000],[null,-10000],[null,-11000],[null,-12000],[null,-13000],[null,-14000],[null,-15000]],
	levels_visited: [],
	stored_events: {},
	mana: 5000,
	max_mana: 5000,
	mana_shock_cycle: -150,
},

//virtual - use to handle player-specific stuff like frogatto spitting out his bellyfull
tmp: {
	left: 0,
	right: 0,
	lookup_time: 0,
	time_last_hit: 0,
	scripted_target_x: null,
	scripted_target_facing: null,
	scripted_move_callback: null,

	//this is used when falling to tell if we've been standing for
	//two consecutive cycles, in which case we go into a standing frame.
	last_standing_cycle: -1,
},

on_end_hurt_anim: "animation('stand')",

on_handle_move_script: "
	if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing, [
			set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), 
			schedule(1, fire_event('handle_move_script')),
		],[
			set(control_lock, null),
			set(me.tmp.scripted_target_x, null),
			set(me.tmp.scripted_target_facing, null),
			set(me.tmp.scripted_move_callback, null),
			tmp.scripted_move_callback,
		]),
	[
		set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), 
		schedule(1, fire_event('handle_move_script')),
	])",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((cycle - vars.time_last_hit)/2 <= 50 and (cycle - vars.time_last_hit)/2 > 10,
		set(solid_dimensions_in, ['player', 'common', 'boss'])),
	if(not is_invincible_posthit, [
		if(underwater and water_object and water_object.liquid_damage, [
			add(hitpoints, -water_object.liquid_damage),
			display_hurt_visuals(null),
			if(water_object.type = 'acid_controller', [
				sound('acid.ogg'),
				spawn('acid_burn_particles',mid_x,mid_y,1,set(child.parent,me)),
			]),
			set(vars.time_last_hit, cycle)]),
		set(alpha,255),
	]),
]",
			
on_ctrl_jump: "if(is_standing and (not animation in ['interact', 'fall', 'jump']), [
	if(not ctrl_down, [
		animation('jump'),
		add(velocity_x, velocity_x),
		set(velocity_y, -jump_power)
	]),
	
	if(not ctrl_down or underwater, [
		set(jumpCloud.parent, self.standing_on),
		add_object(jumpCloud),
	] where jumpCloud = object('dust_cloud_jump', midpoint_x, y2 - 22, facing)),
	
	if(is_standing_on_platform,
		if(ctrl_down,
			[set(fall_through_platforms, 10),
			set(velocity_y, velocity_y + jump_power/10)]
		)
	),
])",
		
on_ctrl_up: "
	if(abs(velocity_x) < 100 and is_standing, 
		map(
				filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 
				'obj', [
			set(tmp.interacting_with, obj),
			fire_event(obj, 'interact')
		])
	)",
	
on_start_interact: "[
	animation('interact'), 
	set(tmp.fired_talk, 0),
]",

on_interacting: "if(tmp.interacting_with and tmp.fired_talk = 0, [
	set(tmp.fired_talk, 1), 
	fire_event(tmp.interacting_with, 'talk'),
])",

on_end_interact_anim: "animation('stand')",

//-------------------------- error condition handling --------------------------
//if the player gets 'stuck' in a narrow gap, this gets them out by automatically making them jump
on_stuck: "if(not underwater, 
	if(not solid(level, midpoint_x, y+self.img_h-10), 
		add(velocity_y, -jump_power), 
		add(velocity_x, if(facing=1, 300, -300))))",

//if we change our solid dimensions -- i.e. try to come back from being hurt, and we can't because we're on top of another solid object, then we take more damage
on_change_solid_dimensions_fail: "if(not is_invincible_posthit, [
	add(hitpoints, -1), 
	set(vars.time_last_hit, cycle),
])",

//-------------------------- damage handling --------------------------
on_surface_damage: "fire_event('collide_damage')",

on_collide_damage: "if(not is_invincible, [
	add(hitpoints, -max(1, surface_damage)), 
	cause_flinch(null), 
	display_hurt_visuals(null), 
	set(vars.time_last_hit, cycle), 
	set(solid_dimensions_in, ['player']),
])",

//when falling, if we are standing for two consecutive frames, change us to a standing animation.
on_process_fall: "
	if(is_standing, 
		if(tmp.last_standing_cycle = cycle-1, 
			animation('stand'), 
			set(tmp.last_standing_cycle, cycle)))",

//check if we end up on a slope in which case we re-calculate our standing.
on_enter_stand_anim: "if(abs(slope_standing_on) > 20, stand())",
on_enter_stand_up_slope_anim: "if(slope_standing_on*facing > -20, stand())",
on_enter_stand_down_slope_anim: "if(slope_standing_on*facing < 20, stand())",
}
